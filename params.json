{"name":"PHP Restserver","tagline":"Enable to create RESTFull services with strong model schema. The main goal is to abstract the class transformation into JSON/XML and encapsulate the server commands.","body":"# PHP Rest Server\r\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/40968662-27b2-4a31-9872-a29bdd68da2b/mini.png)](https://insight.sensiolabs.com/projects/40968662-27b2-4a31-9872-a29bdd68da2b)\r\n\r\n## Description\r\n\r\nEnable to create RESTFull services with strong model schema. The main goal is to abstract the class transformation \r\ninto JSON/XML and encapsulate the server commands.\r\n\r\n## Usage\r\n\r\nThe main purpose of this package is abstract all complexity to process a RESTFull request and handle the object response. \r\n\r\nThe quick guide is:\r\n\r\n- Create an empty class exteding from \\ByJG\\RestServer\\ServiceAbstract\r\n- Implement the methods that will handle the HTTP METHODS (Get, Post, Delete or Put);\r\n\r\nFor example, if you want to process the HTTP method POST you have to do:\r\n\r\n```php\r\nnamespace Sample\r\n\r\nclass MyClass extends \\ByJG\\RestServer\\ServiceAbstract\r\n{\r\n\r\n    public function post()\r\n    {\r\n        $id = $this->getRequest()->get('id');\r\n\r\n        // Do something here...\r\n\r\n        $this->getResponse()->write( [ 'result' => 'ok' ] );\r\n    }\r\n}\r\n```\r\n\r\nThe usual url for call this class is (see more in Routing below):\r\n\r\n```\r\nhttp://yourserver.com/1.0/Sample.MyClass/1234.json     # Or xml or csv\r\n```\r\n\r\n### Processing the request\r\n\r\nAll $_GET, $_SERVER, $_POST, etc are encapsulated in the HttpRequest object. Inside the ServiceAbstract class you just call\r\n`$this->getRequest()` method. \r\n\r\nThe available options are:\r\n* get('key') - Get a parameter passed by GET (the same as $_GET). If not found return false.\r\n* post('key') - Get a parameter passed by POST (the same as $_POST). If not found return false.\r\n* server('key') - Get the parameters sent by server (the same as $_SERVER). If not found return false.\r\n* cookie('key') - Get the cookie sent by the client (the same as $_COOKIE). If not found return false.\r\n* session('key') - Get a server session value(the same as $_SESSION). If not found return false.\r\n* request('key') - Get a value from any of get, post, server, cookie or session. If not found return false.\r\n* payload() - Get the payload passed during the request(the same as php://input). If not found return empty.\r\n* getRequestIP() - Get the client request IP. It handles proxies and firewalls to get the correct IP;\r\n* getRequestServer() - Get the sername. It handles the different environments;\r\n\r\n\r\n### Output your data \r\n\r\nThe main goal of the RestServer ByJG is work with the objects in your native form. The processing to the proper output like\r\nJSON, XML or CSV is done by the platform. See below some examples:\r\n\r\n```php\r\nnamespace Sample\r\n\r\nclass MyClass extends \\ByJG\\RestServer\\ServiceAbstract\r\n{\r\n\r\n    public function get()\r\n    {\r\n        // Output an array\r\n        $array = [\"field\" => \"value\"];\r\n        $this->getResponse()->write($array);\r\n\r\n        // Output a stdClass\r\n        $obj = new \\stdClass();\r\n        $obj->MyField = [ \"teste1\" => \"value1\", \"test2\" => [ \"3\", \"4\"]];\r\n        $obj->OtherField = \"OK\";\r\n        $this->getResponse()->write($obj);\r\n\r\n        // Model  \r\n        // Can be an object :\r\n        //    - with public properties \r\n        //    - with getters and setters\r\n        //    - with mixed public properties and getters and setters\r\n        // See more about object transformations in the project https://github.com/byjg/anydataset\r\n        // For this example, assume that Model have two properties: prop1 and prop2\r\n        $model = new Model('tests', 'another test');\r\n        $this->getResponse()->write($model);\r\n    }\r\n}\r\n```\r\n\r\nThe result will be something like:\r\n\r\n```json\r\n{\r\n    \"field\":\"value\",\r\n    \"MyField\":{\r\n        \"teste1\":\"value1\",\r\n        \"test2\":[\"3\",\"4\"]\r\n    },\r\n    \"OtherField\":\"OK\",\r\n    \"Model\":{\r\n        \"prop1\":\"tests\",\r\n        \"prop2\":\"another test\"\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Combining HTTP Methods with ACTION\r\n\r\nIf you pass a query parameter called action you can combine the HTTP Request and the action for create a specific method for\r\nhandle this specific action. Some examples below:\r\n\r\n\r\n| HTTP Method  | Action Parameter | Method in the class  |\r\n|--------------|------------------|----------------------|\r\n| GET          | -                | get()                |\r\n| POST         | -                | post()               |\r\n| DELETE       | -                | delete()             |\r\n| PUT          | -                | put()                |\r\n| GET          | someaction       | getSomeaction()      |\r\n| POST         | someaction       | postSomeaction()     |\r\n| PUT          | someaction       | putSomeaction()      |\r\n| DELETE       | someactiom       | deleteSomeaction()   |\r\n\r\n\r\n### Routing\r\n\r\nRestServer ByJG uses the Nikic/FastRoute project to do the routing. Yout need copy the file httpdocs/route-dist.php as route.php\r\ninto the root of your public folder accessible throught the web.\r\n\r\nThis file setup all routing process and handle the execution of the proper rest class.\r\n\r\nThere some pre-defined routes as you can see below but you can change it any time you want.\r\n\r\nThe pre-defined routes are:\r\n\r\n| Pattern                                                        | Exeample                                 |\r\n|----------------------------------------------------------------|------------------------------------------|\r\n| /{version}/{module}/{action}/{id:[0-9]+}/{secondid}.{output}   | /1.0/MyNameSpace.Module/list/1/2345.json |\r\n| /{version}/{module}/{action}/{id:[0-9]+}.{output}              | /1.0/MyNameSpace.Module/list/1.json      |\r\n| /{version}/{module}/{id:[0-9]+}/{action}.{output}              | /1.0/MyNameSpace.Module/1/list.json      |\r\n| /{version}/{module}/{id:[0-9]+}.{output}                       | /1.0/MyNameSpace.Module/1.json           |\r\n| /{version}/{module}/{action}.{output}                          | /1.0/MyNameSpace.Module/list.json        |\r\n| /{version}/{module}.{output}                                   | /1.0/MyNameSpace.Module.json             |\r\n\r\nAll variables defined above will be available throught the $_GET. The variables output, module and version having a special\r\nmeaning into the system:\r\n\r\n- **output** will be define the output. Can be \"json\", \"xml\" or \"csv\"\r\n- **module** will be the full namespace to your class. You have to separate the namespaces with \"period\" (.). Do not use back slash (\\);\r\n- **vesion** have a symbolic version for your rest server.\r\n\r\n##### Creating Module Alias\r\n\r\nInstead to pass the full namespace class you can create a module alias. Just add in the route.php file the follow code:\r\n\r\n```php\r\n$route->addModuleAlias('somealias', 'Full.NameSpace.To.Module');\r\n```\r\n\r\nIn the example above if the parameter \"module\" matches with the value \"somealias\" will be mapped to the class \"\\Full\\NameSpace\\To\\Module\"\r\n\r\n\r\n#### Versioning your rest service\r\n\r\nYou can define a version to yout rest service and create a EOL for changes in the services that breaking the interface. Just set in the \"route.php\" file the follow line:\r\n\r\n```php\r\n$route->setDefaultRestVersion('2.0');\r\n```\r\n\r\nThis will populate de variable \"version\".\r\n\r\n#### Creating your own routes\r\n\r\nYou can override the default route values and create your own.\r\n\r\n```php\r\n$route->setDefaultMethods([\r\n\t[ \"method\" => ['GET'], \"pattern\" => '/{module}/{action}/{id:[0-9]+}.{output}', \"handler\" => 'service' ],\r\n]);\r\n```\r\n\r\nThis will override all previous routes and setup the one defined above.\r\n\r\n## Install\r\n\r\nJust type: `composer install \"byjg/restserver=~1.0\"`\r\n\r\n## Running Tests\r\n\r\n\r\n----\r\n[Open source ByJG](http://opensource.byjg.com)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}